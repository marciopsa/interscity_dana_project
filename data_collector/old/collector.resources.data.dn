uses ws.forms.FileFormField

data Capabilities {
	char value[]
}

data Uuids {
	char value[]
}

data DataJSON {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
}

data DataJSON2 {
	Uuids uuids[]

}




component provides ws.Web requires net.http.HTTPRequest HttpRequest, io.Output out, data.IntUtil iu, data.DecUtil du, data.json.JSONParser parser, ws.FormParser fparser {

	DataJSON parseJSON(char json[]) {
		DataJSON dJ = new DataJSON()
		JSONElement doc = parser.parseDocument(json)
		doc = parser.getValue(doc, "data")
		dJ.description = parser.getValue(doc, "description").value
		dJ.status = parser.getValue(doc, "status").value
		dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
		dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
		JSONElement cap = parser.getValue(doc, "capabilities")
		dJ.capabilities = new Capabilities[cap.children.arrayLength]
		for (int i = 0; i < cap.children.arrayLength; i++) {
			dJ.capabilities[i] = new Capabilities(cap.children[i].value)
		}
		return dJ
	}

	DataJSON2 parseJSON2(char json[]) {
		DataJSON2 dJ = new DataJSON2()
		JSONElement doc = parser.parseDocument(json)
		//doc = parser.getValue(doc, "data")
		//dJ.uuids = parser.getValue(doc, "uuids").value
		//dJ.status = parser.getValue(doc, "status").value
		//dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
		//dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
		JSONElement uuids = parser.getValue(doc, "uuids")
		dJ.uuids = new Uuids[uuids.children.arrayLength]
		for (int i = 0; i < uuids.children.arrayLength; i++) {
			dJ.uuids[i] = new Uuids(uuids.children[i].value)
		}
		return dJ
	}

	bool Web:get(char path[], DocStream s)
		{





		return true
	}


		bool Web:post(char path[], char contentType[], byte content[], DocStream s)
			{

				//curl -H "Content-Type: application/json" -X POST -d '{"uuids":["5ad20589-a3db-4521-b1bc-a21dde00a25c","b5d170b5-aaf3-42bc-9e47-58e3fe2a4846"]}' http://localhost:8000/collector/resources/data

				if (content != null) {
					DataJSON2 dJ = parseJSON2(content)
					/* printing info from data structure */

					out.println("UUIDs: ")
					for (int i = 0; i < dJ.uuids.arrayLength; i++) {
						out.println("\t$(dJ.uuids[i].value)")
						}


				//sending a response...
				s.write("{")
				s.write("\"resources\": [")

				s.write("{")
				s.write("\"uuid\": \"ae9cf502-5ed2-47d4-914c-c1caec1c41c4\",")
				s.write("\"capabilities\": {")
			  s.write("\"environment_monitoring\": [")
				s.write("{")
				s.write("\"temperature\": 26.3,")
				s.write("\"humidity\": 64,")
				s.write("\"date\": 2016-06-21T23:27:35.000Z")
				s.write("},")

				s.write("{")
				s.write("\"temperature\": 28.2,")
				s.write("\"humidity\": 48,")
				s.write("\"date\": 2016-06-20T06:37:52.000Z")
				s.write("}")
				s.write("]")
		    s.write("}")
				s.write("},")


				s.write("{")
				s.write("\"uuid\": \"56tcf598-3tg1-77d9-034t-w5ajis5u44c7\",")
				s.write("\"capabilities\": {")
			  s.write("\"environment_monitoring\": [")
				s.write("{")
				s.write("\"temperature\": 25.5,")
				s.write("\"humidity\": 18,")
				s.write("\"date\": 2016-07-21T23:27:35.000Z")
				s.write("}")
				s.write("]")
				s.write("}")
				s.write("}")
				s.write("]")
				s.write("}")

				return true
				}

				/*{
				  "resources": [
				    {
				      "uuid": "ae9cf502-5ed2-47d4-914c-c1caec1c41c4",
				      "capabilities": {
				        "environment_monitoring": [
				          {
				            "temperature": 38.313,
				            "humidity": 38.313,
				            "date": "2016-06-21T23:27:35.000Z"
				          },
				          {
				            "temperature": 28.237,
				            "humidity": 28.237,
				            "date": "2016-06-20T06:37:52.000Z"
				          }
				        ]
				      }
				    },
				    {
				      "uuid": "56tcf598-3tg1-77d9-034t-w5ajis5u44c7",
				      "capabilities": {
				        "environment_monitoring": [
				          {
				            "temperature": 25.5,
				            "humidity": 18,
				            "date": "2016-07-21T23:27:35.000Z"
				          }
				        ]
				      }
				    }
				  ]
				}*/



				return false

			}













	/*bool Web:post(char path[], char contentType[], byte content[], DocStream stream)
		{

			//curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources
			char doc[] =  "{\"data\": {\"description\": \"A public bus\",\"capabilities\": [\"temperature\",\"humidity\",\"illuminate\"],\"status\": \"active\",\"lat\": -23.559616,\"lon\": -46.731386}}"

			//char doc[] = "{\"age\":100,\"name\":\"mkyong.com\",\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"]}"
			//char doc[] = "{}"


			JSONElement jsonelement = jsonParser.parseDocument(doc)

			JSONElement jsonelement1 = jsonParser.getValue(jsonelement, "data")

			char doc_toString[] = jsonParser.documentToString(jsonelement1)

		//JSONElement jsonelement2 = jsonParser.getValue(jsonelement, "description")

			//JSONElement[] children = jsonelement.children
			//char description[] = children[0].value//"marcio"//jsonelement.name
//int type = jsonelement.name

		out.println("accessing HTTP POST method")

		out.println("contentType: $(contentType)")
		out.println("content: $(content)")

		out.println("doc_toString: $(doc_toString)")
		//out.println("JSONElement1: $(jsonelement.children[0].)")
		//out.println("JSONElement: $(type)")
		/*FormData form = fparser.getFormData(contentType, content)

		for (int i = 0; i < form.fields.arrayLength; i++)
			{
			out.println("field: $(form.fields[i].key):$(form.fields[i].value)")
			if (form.fields[i] hastype FileFormField)
				{
				FileFormField fff = form.fields[i]
				out.println(" -- filename: $(fff.filename), encoding: $(fff.encoding)")
				}
			}

		//get(path, stream)

		return true
		}*/

	}
