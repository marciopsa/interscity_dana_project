uses ws.forms.FileFormField

data Capabilities {
	char value[]
}

data DataJSON {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
}

data DataJSON2 {
	char uuid[]
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
	char country[]
	char state[]
	char city[]
	char neighborhood[]
	char postal_code[]
	char created_at[]
	char updated_at[]
	int id
}




component provides ws.Web requires net.http.HTTPRequest HttpRequest, io.Output out, data.IntUtil iu, data.DecUtil du, data.json.JSONParser parser, ws.FormParser fparser {

	DataJSON parseJSON(char json[]) {
		DataJSON dJ = new DataJSON()
		JSONElement doc = parser.parseDocument(json)
		doc = parser.getValue(doc, "data")
		dJ.description = parser.getValue(doc, "description").value
		dJ.status = parser.getValue(doc, "status").value
		dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
		dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
		JSONElement cap = parser.getValue(doc, "capabilities")
		dJ.capabilities = new Capabilities[cap.children.arrayLength]
		for (int i = 0; i < cap.children.arrayLength; i++) {
			dJ.capabilities[i] = new Capabilities(cap.children[i].value)
		}
		return dJ
	}

	bool Web:get(char path[], DocStream s)
		{
		s.write("<html>")

		s.write("<title>My page777!</title>")
		s.write("<link href=\"swc/css/main.css\" rel=\"stylesheet\" type=\"text/css\">")

		s.write("<body>")

		s.write("get adaptor/resources")



		s.write("</body></html>")

		return true
		}


		bool Web:post(char path[], char contentType[], byte content[], DocStream stream)
			{

				//curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources

				if (content != null) {
					DataJSON dJ = parseJSON(content)
					/* printing info from data structure */
					out.println("Description: $(dJ.description)")
					out.println("Capabilities: ")
					for (int i = 0; i < dJ.capabilities.arrayLength; i++) {
						out.println("\t$(dJ.capabilities[i].value)")
					}
					out.println("Status: $(dJ.status)")
					out.println("Lat: $(du.decToString(dJ.lat))")
					out.println("Lon: $(du.decToString(dJ.lon))")




					char url[] = "http://localhost:2019/catalog/resources"


					Header headers[] = null

					//HTTPResponse resp = HttpRequest.post( url[], Header headers[], char postData[])
					HTTPResponse resp = HttpRequest.post( url, headers, content)



					return true
				}

				return false

			}













	/*bool Web:post(char path[], char contentType[], byte content[], DocStream stream)
		{

			//curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources
			char doc[] =  "{\"data\": {\"description\": \"A public bus\",\"capabilities\": [\"temperature\",\"humidity\",\"illuminate\"],\"status\": \"active\",\"lat\": -23.559616,\"lon\": -46.731386}}"

			//char doc[] = "{\"age\":100,\"name\":\"mkyong.com\",\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"]}"
			//char doc[] = "{}"


			JSONElement jsonelement = jsonParser.parseDocument(doc)

			JSONElement jsonelement1 = jsonParser.getValue(jsonelement, "data")

			char doc_toString[] = jsonParser.documentToString(jsonelement1)

		//JSONElement jsonelement2 = jsonParser.getValue(jsonelement, "description")

			//JSONElement[] children = jsonelement.children
			//char description[] = children[0].value//"marcio"//jsonelement.name
//int type = jsonelement.name

		out.println("accessing HTTP POST method")

		out.println("contentType: $(contentType)")
		out.println("content: $(content)")

		out.println("doc_toString: $(doc_toString)")
		//out.println("JSONElement1: $(jsonelement.children[0].)")
		//out.println("JSONElement: $(type)")
		/*FormData form = fparser.getFormData(contentType, content)

		for (int i = 0; i < form.fields.arrayLength; i++)
			{
			out.println("field: $(form.fields[i].key):$(form.fields[i].value)")
			if (form.fields[i] hastype FileFormField)
				{
				FileFormField fff = form.fields[i]
				out.println(" -- filename: $(fff.filename), encoding: $(fff.encoding)")
				}
			}

		//get(path, stream)

		return true
		}*/

	}
