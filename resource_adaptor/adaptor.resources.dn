uses ws.forms.FileFormField
uses DataJSON

/* data Capabilities {
	char value[]
}

data DataJSON {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
} */

data DataJSON2 {
	char uuid[]
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
	char country[]
	char state[]
	char city[]
	char neighborhood[]
	char postal_code[]
	char created_at[]
	char updated_at[]
	int id
}




component provides ws.Web requires InterscityUtil interscityUtil, net.http.HTTPRequest HttpRequest, data.mongo.MongoDB,
			io.Output out, data.IntUtil iu, data.DecUtil du, data.json.JSONParser parser, ws.FormParser fparser {

	/* DataJSON parseJSON(char json[]) {
		DataJSON dJ = new DataJSON()
		JSONElement doc = parser.parseDocument(json)
		doc = parser.getValue(doc, "data")
		dJ.description = parser.getValue(doc, "description").value
		dJ.status = parser.getValue(doc, "status").value
		dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
		dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
		JSONElement cap = parser.getValue(doc, "capabilities")
		dJ.capabilities = new Capabilities[cap.children.arrayLength]
		for (int i = 0; i < cap.children.arrayLength; i++) {
			dJ.capabilities[i] = new Capabilities(cap.children[i].value)
		}
		return dJ
	} */

	DataJSON2 parseJSON2(char json[]) {
			DataJSON2 dJ = new DataJSON2()
			JSONElement doc = parser.parseDocument(json)
			doc = parser.getValue(doc, "data")
			dJ.uuid = parser.getValue(doc, "uuid").value
			dJ.description = parser.getValue(doc, "description").value
			dJ.status = parser.getValue(doc, "status").value
			dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
			dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
			dJ.country = parser.getValue(doc, "country").value
			dJ.state = parser.getValue(doc, "state").value
			dJ.city = parser.getValue(doc, "city").value
			dJ.neighborhood = parser.getValue(doc, "neighborhood").value
			dJ.postal_code = parser.getValue(doc, "postal_code").value
			dJ.created_at = parser.getValue(doc, "created_at").value
			dJ.updated_at = parser.getValue(doc, "updated_at").value
			dJ.id = iu.intFromString(parser.getValue(doc, "id").value)
			JSONElement cap = parser.getValue(doc, "capabilities")
			dJ.capabilities = new Capabilities[cap.children.arrayLength]
			for (int i = 0; i < cap.children.arrayLength; i++) {
				dJ.capabilities[i] = new Capabilities(cap.children[i].value)
			}
			return dJ
		}

	/* bool Web:get(char path[], DocStream s)
		{
		s.write("<html>")

		s.write("<title>My page777!</title>")
		s.write("<link href=\"swc/css/main.css\" rel=\"stylesheet\" type=\"text/css\">")

		s.write("<body>")

		s.write("get adaptor/resources")



		s.write("</body></html>")

		return true
		} */

		bool Web:get(char path[], DocStream s, HashTable params) {
			if (params != null) {
				String id = params.get("id")
				String device = params.get("device")
				if (id != null) { out.println("$(id.string)") }
				if (device != null) { out.println("$(device.string)") }
			}
			s.write("<html>")
			s.write("<title>My page!</title>")
			s.write("<link href=\"swc/css/main.css\" rel=\"stylesheet\" type=\"text/css\">")
			s.write("<body>")
			s.write("<div class = \"pagebox\">")
			s.write("<div class = \"section_header\">A section</div>")
			s.write(new char[]("<div style = \"margin-top: 10pt;\">",
												"<span style = \"display: inline-block; text-align:center; width: 49%\">Some text</span>",
												"<span style = \"display: inline-block; text-align:center; width: 49%\">More text</span>",
												"</div>"))
			s.write("<div class = \"section_header\">Another section</div>")
			s.write(new char[]("<form action=\"\" method=\"post\" enctype=\"multipart/form-data\">",
								"<input type=\"file\" name=\"filename\" size=\"40\"> a file <br/>",
								"<p><input type=\"submit\" value=\"Submit file\" id=\"formbutton\"></p>",
								"</form>"))
			s.write("</div>")
			s.write("</body></html>")
			return true
		}



		//bool Web:post(char path[], char contentType[], byte content[], DocStream s)
		bool Web:post(char path[], char contentType[], byte content[], DocStream s, HashTable params)
		{

						//curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources


					 if (params != null) {
							String id = params.get("id")
							String device = params.get("device")
							if (id != null) { out.println("ID: $(id.string)") }
							if (device != null) { out.println("$(device.string)") }
						} else {

//===================================================================
						  if (content != null) {
							//DataJSON dJ = parseJSON(content)

							DataJSON dJ = interscityUtil.resourceMetaDataJSONParser(content)

							/* printing info from data structure */
							out.println("Description: $(dJ.description)")
							out.println("Capabilities: ")
							for (int i = 0; i < dJ.capabilities.arrayLength; i++) {
								out.println("\t$(dJ.capabilities[i].value)")
							}
							out.println("Status: $(dJ.status)")
							out.println("Lat: $(du.decToString(dJ.lat))")
							out.println("Lon: $(du.decToString(dJ.lon))")

							int local_id = interscityUtil.storeResourceMetaData(dJ)


							char url[] = "http://localhost:2019/catalog/resources"


							Header headers[] = null

							//HTTPResponse resp = HttpRequest.post( url[], Header headers[], char postData[])
							HTTPResponse resp = HttpRequest.post( url, headers, content)



							char response_content[] = resp.content

							if (response_content != null) {
								DataJSON2 dJ2 = parseJSON2(response_content)
								/* printing info from data structure */
								out.println("data212: $(dJ2.uuid)")


								char response_uuid[] =
								s.write("{")
								s.write("\"data\": {")
								//s.write("\"uuid\": \"45b7d363-86fd-4f81-8681-663140b318d4\",")
								//s.write("\"description\": \"A public bus\",")
								s.write("\"uuid\":\"$(dJ2.uuid)\",")
								s.write("\"description\": \"$(dJ2.description)\",")
								s.write("\"capabilities\": [")
								for (int i = 0; i < dJ.capabilities.arrayLength; i++) {
									if (i == dJ.capabilities.arrayLength - 1)
										s.write("\t\"$(dJ.capabilities[i].value)\"")
									else
										s.write("\t\"$(dJ.capabilities[i].value)\",")
								}
								s.write("],")
								s.write("\"status\": \"$(dJ2.status)\",")
								char lat_string[] = du.decToString(dJ2.lat)
								char lon_string[] = du.decToString(dJ2.lon)
								s.write("\"lat\": \"$(lat_string)\",")
								s.write("\"lon\": \"$(lon_string)\",")
								s.write("\"country\": \"$(dJ2.country)\",")
								s.write("\"state\": \"$(dJ2.state)\",")
								s.write("\"city\": \"$(dJ2.city)\",")
								s.write("\"neighborhood\": \"$(dJ2.neighborhood)\",")
								s.write("\"postal_code\": \"$(dJ2.postal_code)\",")
								s.write("\"created_at\": \"$(dJ2.created_at)\",")
								s.write("\"updated_at\": \"$(dJ2.updated_at)\",")
								char local_id_string[] = iu.intToString(local_id)
								s.write("\"id\": \"$(local_id_string)\"")
								s.write("}")
								s.write("}")


								//JSON to be sent to resource.
								/*{
									"data": {
										"uuid": "45b7d363-86fd-4f81-8681-663140b318d4",
										"description": "A public bus",
										"capabilities": [
											"temperature",
											"humidity",
											"illuminate"
										],
										"status": "active",
										"lat": -23.559616,
										"lon": -46.731386,
										"country": "Brazil",
										"state": "São Paulo",
										"city": "São Paulo",
										"neighborhood": "Butantã",
										"postal_code": null,
										"created_at": "2018-05-07T01:25:49.939Z",
										"updated_at": "2018-05-07T01:25:49.939Z",
										"id": 10
									}
								}*/


								return true
							}
						}
					}
				  return false
    }


					// Defina aqui todas as expressoes de URL que voce desejar.
					// Quando a URL bater com alguma das expressoes definidas, ele colocarar os valores na HashTable
					// Ex.: /resource/aoskdoa23, voce pode acessar assim: String id = param.get("id")
					// Ta ilustrado nas funcoes acima... Espero que ajude...
		String[] Web:urls() {
			String exprs[] = new String[]()
			exprs = new String[](exprs, new String("adaptor/resources/{id}"))
			//exprs = new String[](exprs, new String("/resource/{id}/{device}"))
			return exprs
		}
	}
