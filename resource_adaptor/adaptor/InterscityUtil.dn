//uses DataJSON

data Capabilities {
	char value[]
}

data ResourceMetaData {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon

}

data InterSCityData {
	ResourceMetaData data_
}




component provides InterscityUtil requires io.Output out, data.IntUtil iu, data.DecUtil du,
				data.json.JSONParser parser, data.adt.HashTable {

					HashTable resourceMetaData_hashtable = new HashTable()

					//char uuid[]   //Not used yet!!!
					int id = 0


	/* InterscityUtil:InterscityUtil() {
		resourceMetaData_hashtable = new HashTable()
		id = 0
	} */

	DataJSON InterscityUtil:resourceMetaDataJSONParser(char json[]) {
		DataJSON dJ = new DataJSON()
		JSONElement doc = parser.parseDocument(json)
		doc = parser.getValue(doc, "data")
		dJ.description = parser.getValue(doc, "description").value
		dJ.status = parser.getValue(doc, "status").value
		dJ.lat = du.decFromString(parser.getValue(doc, "lat").value)
		dJ.lon = du.decFromString(parser.getValue(doc, "lon").value)
		JSONElement cap = parser.getValue(doc, "capabilities")
		dJ.capabilities = new Capabilities[cap.children.arrayLength]
		for (int i = 0; i < cap.children.arrayLength; i++) {
			dJ.capabilities[i] = new Capabilities(cap.children[i].value)
		}
		return dJ
	}

	int InterscityUtil:storeResourceMetaData(InterSCityData resourceMetatData) {
		int key = id
		id++



		resourceMetaData_hashtable.put(key, resourceMetatData)
		InterSCityData stored_dJ = resourceMetaData_hashtable.get(id)
		char stored_status[] = dJ.status

		out.println("Status armazenado no HashTable: $(stored_status)")

		return key
	}

	/* int InterscityUtil:storeResourceMetaData(DataJSON dJ) {
		int key = id
		id++



		resourceMetaData_hashtable.put(key, dJ)
		DataJSON stored_dJ = resourceMetaData_hashtable.get(id)
		char stored_status[] = dJ.status

		out.println("Status armazenado no HashTable: $(stored_status)")

		return key
	} */

}
