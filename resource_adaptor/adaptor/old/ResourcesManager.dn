
/* data Response {
	char response[]
	char id[]
	char device[]
	char description[]
} */

data ResponseToResource {
	char response[]
	char uuid[]
	char device[]
	char description[]
	Capabilities capabilities[]
  char status[]
  dec lat
  dec lon
  char country[]
  char state[]
  char city[]
  char neighborhood[]
  char postal_code[]
  char created_at[]
  char updated_at[]
  int id
}

//======================================
data Capabilities {
	char value[]
}

 data ResourceMetaData {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon

}

data InterSCityData {
	ResourceMetaData data_
}

// JSON data to be sent to Resource Adaptor
/* {
	"data": {
		"description": "A public bus",
		"capabilities": [
			"temperature",
			"humidity",
			"illuminate"
		],
		"status": "active",
		"lat": -23.559616,
		"lon": -46.731386
	}
} */




component provides ResourcesManager requires net.http.HTTPRequest request, io.Output out, data.StringUtil strUtil,
data.IntUtil intUtil, data.json.JSONEncoder encoder, data.adt.HashTable {

	HashTable resourceMetaData_hashtable = new HashTable()

	//char uuid[]   //Not used yet!!!
	int global_id = 1


	void ResourcesManager:sendData(byte content[], char id[], char device[], DocStream docStream) {
		// registering metadata on Resource catalog
		char url[] = "http://localhost:2020/collector/data/$(id)"
		Header headers[] = null

		HTTPResponse response = request.post(url, null, content)

		


	}


	void ResourcesManager:register(byte content[], DocStream s) {

		//curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources
		Map map[] = new Map[](new Map("data", "data_"))
		InterSCityData bus = encoder.jsonToData(content, typeof(InterSCityData), map)

		int created_id = storeResourceMetaData(bus)
		char created_id_str[] = intUtil.intToString(created_id)
		out.println("created_id: $(created_id_str)")


		for (int i = 0; i < bus.data_.capabilities.arrayLength; i++) {
		 out.println("capabilities11111: $(bus.data_.capabilities[i].value)")
	  }




		// registering metadata on Resource catalog
		char url[] = "http://localhost:2019/catalog/resources"
		Header headers[] = null

		HTTPResponse response = request.post(url, null, content)
		//HTTPResponse response = request.post(url, null, jsonBus)
		//HTTPResponse resp = HttpRequest.post( url[], Header headers[], char postData[])
		//HTTPResponse resp = HttpRequest.post( url, headers, content)
		//char response_content[] = resp.content





		//Map map[] = new Map[](new Map("data", "data_"))
		ResponseToResource resourceCatalogResponse = encoder.jsonToData(response.content, typeof(ResponseToResource), map)
		//out.println("response.content.uuid: $(resourceCatalogResponse.uuid)")
		out.println("response.contentFromCatalog: $(response.content)")


		//=================================
		//ResponseToResource responseToResource = new ResponseToResource()
		//r.response = response.content

	  //responseToResource.uuid = resourceCatalogResponse.uuid

		ResponseToResource r = new ResponseToResource()
		r.device = resourceCatalogResponse.device
		r.description = resourceCatalogResponse.description
		r.uuid = resourceCatalogResponse.uuid

		r.capabilities = new Capabilities[resourceCatalogResponse.capabilities.arrayLength]
		for (int i = 0; i < resourceCatalogResponse.capabilities.arrayLength; i++) {
			r.capabilities[i] = resourceCatalogResponse.capabilities[i]
			out.println("capabilities: $(resourceCatalogResponse.capabilities[i].value)")
		}

		r.status = resourceCatalogResponse.status
		r.lat = resourceCatalogResponse.lat
		r.lon = resourceCatalogResponse.lon
		r.country = resourceCatalogResponse.country
		r.state = resourceCatalogResponse.state
		r.city = resourceCatalogResponse.city
		r.neighborhood = resourceCatalogResponse.neighborhood
		r.postal_code = resourceCatalogResponse.postal_code
		r.created_at = resourceCatalogResponse.created_at
		r.updated_at = resourceCatalogResponse.updated_at
		r.id = resourceCatalogResponse.id

		//s.write(encoder.jsonFromData(resourceCatalogResponse, null))


		/* ResponseToResource r = new ResponseToResource()
		r.response = "success123"
		r.id = 12345
		r.device = "sensor135."
		r.description = "public bus - test" */

		s.write(encoder.jsonFromData(r, null))









	}

	int storeResourceMetaData(InterSCityData resourceMetatData) {
		int key = global_id
		global_id++



		resourceMetaData_hashtable.put(key, resourceMetatData)
		InterSCityData stored_dJ = resourceMetaData_hashtable.get(key)
		char stored_status[] = stored_dJ.data_.status

		char key_str[] = intUtil.intToString(key)
		//out.println("created_id: $(key_str)")
		out.println("key111: $(key_str)")
		out.println("Status armazenado no HashTable: $(stored_status)")

		return key
	}

}
