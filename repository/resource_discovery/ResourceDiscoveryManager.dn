uses data.String

data ResourceCapabilitiesToBeSendToApplication {
	char id[]
	char name[]
	char function[]
	char description[]
}

data FinalResponse {
	ResourceCapabilitiesToBeSendToApplication resourceCapabilitiesToBeSendToApplication[]
}

data ResponseToApplication {
	FinalResponse resp
}

data Response {
	char response[]
	char id[]
	char device[]
	char description[]
}

data ResourceMetaData {
 char description[]
 String capabilities[]
 char status[]
 dec lat
 dec lon

}

data InterSCityData {
	ResourceMetaData data_
}

component provides resource_discovery.ResourceDiscoveryManager requires net.http.HTTPRequest request,
	io.Output out, data.StringUtil strUtil, data.IntUtil intUtil, data.json.JSONEncoder encoder, data.adt.HashTable,  {

  void ResourceDiscoveryManager:discoveryResourceByCapability(char capability_value[], DocStream stream) {
		//curl -H "Content-Type: application/json" -X POST -d '{"capabilities":["environment_monitoring"]}' http://localhost:8000/collector/resources/data
		out.println("inside discoveryResourceByCapability()...\n analising capability value = $(capability_value)")
		char url[] = "http://localhost:2019/catalog/capabilities/$(capability_value)"
		Header headers[] = null
		HTTPResponse response = request.get(url, null)//request.post(url, null, content)
		out.println("response000111: $(response.content)")
		stream.write(response.content)
	}
}
