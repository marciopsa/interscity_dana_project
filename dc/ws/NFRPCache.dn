/* NFRPCache.dn 
 *
 * Author: Roberto Rodrigues Filho - Sept @ 2018
 */
component provides ws.Web, Service requires io.Output out, ws.Web:nfrp web, interceptor.DSInterceptor, 
	cache.Cache cache {

	implementation Service {
		void Service:start() {
			cache.deleteAll()
		}
		void Service:stop() {
			cache.deleteAll()
		}
	}

	implementation Web {
		bool Web:get(char path[], DocStream stream, HashTable params) {
			byte response[] = cache.get(path)
			if (response != null) {
				stream.write(response)
				return true
			}
			bool result
			DSInterceptor interceptor = new DSInterceptor(null, null, false)
			interceptor.set(stream)
			result = web.get(path, interceptor, params)
			//cache only if result is true
			if ((result) && (interceptor.get() != null)) {
				stream.write(interceptor.get())
				cache.insert(path, interceptor.get())
			}
			return result
		}

		bool Web:post(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			cache.deleteAll()
			return web.post(path, contentType, content, stream, params)
		}

		bool Web:put(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			return false
		}

		bool Web:delete(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			return false
		}

		String[] Web:urls() {
			return web.urls()
		}	
	}
}
