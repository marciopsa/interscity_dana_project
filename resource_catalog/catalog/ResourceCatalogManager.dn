


data ResourceCapabilitiesToSendToApplication {
	/*char id[]
	char name[]
	char function[]
	char description[] */
}

data ResponseToApplication {
	ResourceCapabilitiesToSendToApplication resourceCapabilitiesToSendToApplication[]
	/* {
  "capabilities": [
    {
      "id": 1,
      "name": "semaphore",
      "function": 1,
      "description": "Manipulate the semaphore status"
    },
    {
      "id": 2,
      "name": "temperature",
      "function": 0,
      "description": "Measure the temperature of the environment"
    }
  ]
} */
}

data Capabilities {
	char value[]
}

data ResourceMetaData {
	char description[]
	Capabilities capabilities[]
	char status[]
	dec lat
	dec lon
}

data ResponseToResource {
	char response[]
	char uuid[]
	char device[]
	char description[]
	Capabilities capabilities[]
  char status[]
  dec lat
  dec lon
  char country[]
  char state[]
  char city[]
  char neighborhood[]
  char postal_code[]
  char created_at[]
  char updated_at[]
  int id
}

data InterSCityData {
	ResourceMetaData data_
}

component provides ResourceCatalogManager requires io.Output out, data.StringUtil strUtil, data.IntUtil intUtil,
										data.json.JSONEncoder encoder, data.adt.HashTable {

	HashTable resourceMetaData_hashtable = new HashTable()

	//char uuid[]   //Not used yet!!!
	int global_id = 1

	void ResourceCatalogManager:register(byte content[], DocStream s) {
		//Request example: curl -d '{"data": {"description": "A public bus","capabilities": ["temperature","humidity","illuminate"],"status": "active","lat": -23.559616,"lon": -46.731386}}' -H 'Content-Type: application/json' http://localhost:2018/adaptor/resources
		Map map[] = new Map[](new Map("data", "data_"))
		InterSCityData bus = encoder.jsonToData(content, typeof(InterSCityData), map)

		//Storing metadata on the global database of the Resource Catalog Microservice.
		int created_id = storeResourceMetaData(bus)
		char created_id_str[] = intUtil.intToString(created_id)
		out.println("ID stored on Resource Catalog Microservice: $(created_id_str)")

		//Composing response message to Resource Adaptor Microservice
		ResponseToResource r = new ResponseToResource()
		r.response = "success"
		r.uuid = created_id_str
		r.device = ""
		r.description = bus.data_.description
		r.capabilities = new Capabilities[bus.data_.capabilities.arrayLength]
		for (int i = 0; i < bus.data_.capabilities.arrayLength; i++) {
			r.capabilities[i] = bus.data_.capabilities[i]
		}
		r.status = bus.data_.status
		r.lat = bus.data_.lat
		r.lon = bus.data_.lon
		r.country = "Brazil"  											// getCountry()
		r.state = "São Paulo"												// getState()
		r.city = "São Paulo"												// getCity()
		r.neighborhood = "Butantã"									// getNeighborhood()
		r.postal_code = null												// getPostalCode()
		r.created_at = "2018-05-07T01:25:49.939Z"		// getCreatedAt()
		r.updated_at = "2018-05-07T01:25:49.939Z"		// getUpdatedAt()
		r.id = created_id

		out.println("Sending response to Resource Adaptor...")
		s.write(encoder.jsonFromData(r, null))
	}

	void ResourceCatalogManager:getResourcesByCapability(byte content[], char capability[], DocStream stream) {
		//ResponseToApplication responseToApplication = getListOfResourcesByCapability(char capability)

		out.println("Sending response to Resource Discovery...")
		//s.write(encoder.jsonFromData(responseToApplication, null))

	}

	/* ResponseToApplication getListOfResourcesByCapability(char capability) {
		ResourceCapabilitiesToSendToApplication capability_resource1 = new ResourceCapabilitiesToSendToApplication()
		capability_resource1.id = "1"
		capability_resource1.name = "environment_monitoring"
		capability_resource1.function = "1"
		capability_resource1.description = "Measure the luminosity of the environment"



		ResourceCapabilitiesToSendToApplication capability_resource2 = new ResourceCapabilitiesToSendToApplication()
		capability_resource2.id = "2"
		capability_resource2.name = "environment_monitoring"
		capability_resource2.function = "0"
		capability_resource2.description = "Measure the temperature of the environment"




		ResponseToApplication responseToApplication = new ResponseToApplication(capability_resource1, capability_resource2)
		return responseToApplication

	} */


	int storeResourceMetaData(InterSCityData resourceMetatData) {
		int key = global_id
		global_id++

		resourceMetaData_hashtable.put(key, resourceMetatData)

		return key
	}
}
