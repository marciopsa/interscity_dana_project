const char debugMSG[] = "[@ServerPerception]"

component provides App requires io.Output out, time.Timer t, io.TextFile, data.json.JSONParser parser, data.IntUtil iu, data.DecUtil du, monitoring.Perception {

Perception perception

char[] interpretPerceptionData(char percData[]) {
    char result[] = ""
    JSONElement document = parser.parseDocument(percData)
    JSONElement metricsJSON = parser.getValue(document, "metrics")
    if (metricsJSON != null) {
        for (int pointer = 0; pointer < metricsJSON.children.arrayLength; pointer++) {
            JSONElement childrenMetrics = metricsJSON.children[pointer]
            dec mValue = du.decFromString(parser.getValue(childrenMetrics, "value").value)
            int mCount = iu.intFromString(parser.getValue(childrenMetrics, "count").value)
            dec avg = mValue/mCount
            dec workload = mCount/5.0
            char current_config[] = "default" //perception.getConfig()
            result = new char[](result, "$(current_config),$(du.decToString(avg)),$(iu.intToString(mCount)),$(du.decToString(workload))")//\n")
        }
    }
    return result
}


int App:main(AppParam params[]) {
    perception = new Perception(true)

    AppParam params2[] = null
    for (int i = 1; i < params.arrayLength; i++) {
	params2 = new AppParam[](params2, params[i])
    }

    perception.setMain("../../dana/components/ws/core.o", params2)
    perception.addProxy("|../pal/monitoring/proxies/DCProxy.o|*(*:ws.Web[0]:*)|")
    
    //t.sleep(10000)
    int countName = 0
    //while (true) {
        //TextFile resultTestFile = new TextFile(new char[]("NewResults", iu.intToString(countName), ".data"), File.FILE_ACCESS_WRITE)
   	TextFile resultTestFile = new TextFile(new char[]("NewResults", iu.intToString(countName), ".csv"), File.FILE_ACCESS_WRITE)
        String myConfs[] = perception.getAllConfigs()
        for (int i = 0; i < myConfs.arrayLength; i++) {
            perception.setConfig(myConfs[i].string)
            perception.getPerceptionData()
            int counter = 0
            while (counter < 5) {
		out.println("$(iu.intToString(counter+1))")
                t.sleep(5000)
                resultTestFile.writeLine(interpretPerceptionData(perception.getPerceptionData()))
                out.println("Collected $(iu.intToString(counter+1))")
                counter++
            }
            resultTestFile.writeLine("\n")
        }
        resultTestFile.close()
        countName++
    //}

  //  while (true) {
   // }

    return 0




}

} 

/*
char[] interpretPerceptionData(char percData[]) {
    char result[] = ""
    JSONElement document = parser.parseDocument(percData)
    JSONElement metricsJSON = parser.getValue(document, "metrics")
    if (metricsJSON != null) {
        for (int pointer = 0; pointer < metricsJSON.children.arrayLength; pointer++) {
            JSONElement childrenMetrics = metricsJSON.children[pointer]
            dec mValue = du.decFromString(parser.getValue(childrenMetrics, "value").value)
            int mCount = iu.intFromString(parser.getValue(childrenMetrics, "count").value)
            dec avg = mValue/mCount
            dec workload = mCount  // /5
            result = new char[](result, "$(debugMSG) mValue: $(du.decToString(mValue))\n")
            result = new char[](result, "$(debugMSG) mCount: $(iu.intToString(mCount))\n")
            result = new char[](result, "$(debugMSG) avg: $(du.decToString(avg))\n")
    	    result = new char[](result, "$(debugMSG) workload: $(du.decToString(workload))\n")
        }
    }

    JSONElement eventsJSON = parser.getValue(document, "events")
    if (eventsJSON != null) {
        for (int pointer = 0; pointer < eventsJSON.children.arrayLength; pointer++) {
            JSONElement childrenMetrics = eventsJSON.children[pointer]
            char eventCount[] = parser.getValue(childrenMetrics, "count").value
            char startTime[] = parser.getValue(childrenMetrics, "startTime").value
            char endTime[] = parser.getValue(childrenMetrics, "endTime").value
            result = new char[](result, "$(debugMSG) eventCount: $(eventCount)\n")
            result = new char[](result, "$(debugMSG) startTime: $(startTime)\n")
            result = new char[](result, "$(debugMSG) endTime: $(endTime)\n\n")
        }
    }
    
    return result
}*/



/*
//t.sleep(10000)
int countName = 0
while (true) {
TextFile resultTestFile = new TextFile(new char[]("NewResults", iu.intToString(countName), ".data"), File.FILE_ACCESS_WRITE)
String myConfs[] = perception.getAllConfigs()
for (int i = 0; i < myConfs.arrayLength; i++) {
perception.setConfig(myConfs[i].string)
perception.getPerceptionData()
int counter = 0
while (counter < 100) {
t.sleep(5000)
resultTestFile.writeLine(interpretPerceptionData(perception.getPerceptionData()))
out.println("Collected $(iu.intToString(counter+1))")
counter++
}
resultTestFile.writeLine("\n")
}
resultTestFile.close()
countName++
}

return 0
}**/


/*
t.sleep(10000)
    TextFile resultTestFile = new TextFile("NewResults.data", File.FILE_ACCESS_WRITE)
    String myConfs[] = perception.getAllConfigs()
    for (int i = 0; i < myConfs.arrayLength; i++) {
        perception.setConfig(myConfs[i].string)
        perception.getPerceptionData()
        int counter = 0
        while (counter < 100) {
            t.sleep(5000)
            resultTestFile.writeLine(interpretPerceptionData(perception.getPerceptionData()))
            out.println("Collected $(iu.intToString(counter+1))")
            counter++
        }
        resultTestFile.writeLine("\n")
    }
    resultTestFile.close()

    return 0 **/






