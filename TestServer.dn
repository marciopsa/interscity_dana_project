
component provides App requires io.Output out, data.IntUtil iu, net.TCPSocket, net.TCPServerSocket,
	time.Calendar ic, time.DateUtil dateUtil, io.File {

	void process(char command[], TCPSocket s) {
		DateTime dt1
		DateTime dt2
		int result
		File f = null
		if (command == "3mb\r\n\r\n") {
			dt1 = ic.getTime()
			f = new File("3mb_image.jpg", File.FILE_ACCESS_READ)
			s.send(f.read(f.getSize()))
			s.disconnect()
			f.close()
			dt2 = ic.getTime()
			result =  dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
			out.println("Response time: $(iu.intToString(result))")
		} else if (command == "1kb\r\n\r\n") {
			dt1 = ic.getTime()
			f = new File("text-1kb.html", File.FILE_ACCESS_READ)
			s.send(f.read(f.getSize()))
			s.disconnect()
			f.close()
			dt2 = ic.getTime()
			result =  dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
			out.println("Response time: $(iu.intToString(result))")
		}
	}

	void handleRequest(TCPSocket s) {
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\n") && 
					(command[len-2] == "\r") && (command[len-1] == "\n")) {
					process(command, s)
					break
				}
			}
		}
	}

	int App:main(AppParam params[]) {
		TCPServerSocket host = new TCPServerSocket()
		int server_port = 2012
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, server_port)) {
			out.println("Error: failed to bind master socket")
			return 1
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) { 
				handleRequest(client)
			}
		}
		return 0
	}
}
